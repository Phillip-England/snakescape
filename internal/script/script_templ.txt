<script>\n        function onloadEvent() {\n            header.hook()\n            sitenav.hook()\n            pagenav.hook()\n            // Prism.hooks.add('before-sanity-check', function (env) {\n            //     env.element.innerHTML = env.element.innerHTML.replace(/<br>/g, '\\n');\n            //     env.code = env.element.textContent;\n            // })\n            Prism.highlightAll()\n        }\n    </script>
<script>\n        function applyThemeToScrollbar() {\n            if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {\n                document.querySelector('#main').classList.add('scrollbar-dark')\n            } else {\n                document.querySelector('#main').classList.add('scrollbar')\n            }\n        }\n    </script>
<script>\n        document.getElementsByTagName('body')[0].removeEventListener('htmx:afterOnLoad', onloadEvent)\n        document.getElementsByTagName('body')[0].addEventListener('htmx:afterOnLoad', onloadEvent)\n        document.removeEventListener('DOMContentLoaded', onloadEvent)\n        document.addEventListener('DOMContentLoaded', onloadEvent)\n        applyThemeToScrollbar() // without this, after page navigation, the scollbar will lose its theme\n    </script>
<script>\n        function pathParts() {\n            const pathname = window.location.pathname;\n            if (pathname === \"/\") {\n                return [\"/\"];\n            }\n            const segments = pathname.split('/').filter(segment => segment !== '');\n            const prefixedSegments = segments.map(segment => `/${segment}`);\n            return prefixedSegments;\n        }\n    </script>
<script>\n        if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {\n            document.documentElement.classList.add('dark')\n        } else {\n            document.documentElement.classList.remove('dark')\n        }\n    </script>
<script>\n        class SiteNav {\n            constructor() {}\n            hook() {\n                this.sitenav = document.getElementById('sitenav')\n                this.mobilenav = document.getElementById('mobilenav')\n                this.itemsWithoutDropdowns = [...this.sitenav.querySelectorAll('.sitenav-item-no-dropdown'), ...this.mobilenav.querySelectorAll('.sitenav-item-no-dropdown')];\n                this.dropdowns = [...this.sitenav.querySelectorAll('.sitenav-dropdown'), ...this.mobilenav.querySelectorAll('.sitenav-dropdown')];\n                this.dropdownItems = [...this.sitenav.querySelectorAll('.sitenav-dropdown-item'), ...this.mobilenav.querySelectorAll('.sitenav-dropdown-item')];\n                this.colorItemsWithoutDropdowns()\n                this.colorDropdowns()\n                this.hookToggleOnDropdowns()\n            }\n            colorItemsWithoutDropdowns() {\n                let baseSiteNavItems = document.querySelectorAll('.sitenav-item-no-dropdown')\n                let currentPath = window.location.pathname;\n                for (let i = 0; i < this.itemsWithoutDropdowns.length; i++) {\n                    let item = this.itemsWithoutDropdowns[i];\n                    let activePath = item.getAttribute('active-path');\n                    if (activePath == currentPath) {\n                        item.classList.add('bg-lightgray');\n                        item.classList.add('dark:bg-darkgray');\n                        item.classList.add('text-blue');\n                        item.classList.add('dark:text-blue');\n                        item.classList.remove('text-darkgray');\n                        item.classList.remove('dark:text-gray');\n                    }\n                }\n            }\n            eToggleDropdown(e) {\n                if (e.target.closest('.hidden-section')) {\n                    return\n                }\n                let hiddenSection = e.currentTarget.querySelector('.hidden-section')\n                let caret = e.currentTarget.querySelector('.caret')\n                if (hiddenSection.classList.contains('hidden')) {\n                    hiddenSection.classList.remove('hidden');\n                    caret.classList.add('rotate-90')\n                } else {\n                    hiddenSection.classList.add('hidden');\n                    caret.classList.remove('rotate-90')\n                }\n            }\n            hookToggleOnDropdowns() {\n                for (let i = 0; i < this.dropdowns.length; i++) {\n                    let dropdown = this.dropdowns[i]\n                    dropdown.removeEventListener('click', this.eToggleDropdown)\n                    dropdown.addEventListener('click', this.eToggleDropdown)\n                }\n            }\n            colorDropdowns() {\n                let dropdowns = this.dropdowns\n                let path = window.location.pathname;\n                let parts = pathParts()\n                for (let i = 0; i < dropdowns.length; i++) {\n                    let dropdown = dropdowns[i]\n                    let title = dropdown.querySelector('.dropdown-title')\n                    let caret = dropdown.querySelector('.caret')\n                    let activePath = dropdown.getAttribute('active-path')\n                    let hiddenSection = dropdown.querySelector('.hidden-section')\n                    if (activePath == parts[0]) {\n                        title.classList.add('text-blue');\n                        title.classList.add('dark:text-blue');\n                        caret.classList.add('rotate-90')\n                        hiddenSection.classList.remove('hidden');\n                    }\n                }\n                for (let i = 0; i < this.dropdownItems.length; i++) {\n                    let dropdownItem = this.dropdownItems[i];\n                    let dropdownItemPath = dropdownItem.getAttribute('active-path');\n                    if (dropdownItemPath == path) {\n                        dropdownItem.classList.add('bg-lightgray');\n                        dropdownItem.classList.add('dark:bg-darkgray');\n                        dropdownItem.classList.add('text-blue');\n                    }\n                }\n            }\n        }\n        const sitenav = new SiteNav()\n    </script>
<script>\n        class Header {\n            constructor() {}\n            hook() {\n                this.header = document.querySelector('#header')\n                this.logo = this.header.querySelector('.logo')\n                this.logoDark = this.header.querySelector('.logo-dark')\n                this.moon = this.header.querySelector('.moon-icon')\n                this.sun = this.header.querySelector('.sun-icon')\n                this.bars = this.header.querySelector('.bars-icon')\n                this.x = this.header.querySelector('.x-icon')\n                this.main = document.querySelector('#main')\n                this.logoPlaceholder = this.header.querySelector('.logo-placeholder')\n                this.overlay = document.querySelector('#overlay')\n                this.initHeaderTheme()\n                this.sun.removeEventListener('click', this.eDarkModeEnabled.bind(this))\n                this.sun.addEventListener('click', this.eDarkModeEnabled.bind(this))\n                this.moon.removeEventListener('click', this.eLightModeEnabled.bind(this))\n                this.moon.addEventListener('click', this.eLightModeEnabled.bind(this))\n                this.bars.removeEventListener('click', this.eToggleMobileNav.bind(this))\n                this.bars.addEventListener('click', this.eToggleMobileNav.bind(this))\n                this.x.removeEventListener('click', this.eToggleMobileNav.bind(this))\n                this.x.addEventListener('click', this.eToggleMobileNav.bind(this))\n                this.overlay.removeEventListener('click', this.eToggleMobileNav.bind(this))\n                this.overlay.addEventListener('click', this.eToggleMobileNav.bind(this))\n                this.mobilenavitems = document.querySelectorAll('.mobilenav-item')\n                for (let i = 0; i < this.mobilenavitems.length; i++) {\n                    let mobilenavitem = this.mobilenavitems[i]\n                    mobilenavitem.removeEventListener('click', this.eToggleMobileNav.bind(this))\n                    mobilenavitem.addEventListener('click', this.eToggleMobileNav.bind(this))\n                }\n            }\n            initHeaderTheme() {\n                if (localStorage.getItem('theme') === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {\n                    document.documentElement.classList.add('dark')\n                    this.logo.classList.add('hidden')\n                    this.logoDark.classList.remove('hidden')\n                    this.moon.classList.add('md:flex')\n                    this.sun.classList.remove('md:flex')\n                    this.logoPlaceholder.classList.add('hidden')\n                } else {\n                    document.documentElement.classList.remove('dark')\n                    this.logo.classList.remove('hidden')\n                    this.logoDark.classList.add('hidden')\n                    this.moon.classList.remove('md:flex')\n                    this.sun.classList.add('md:flex')\n                    this.logoPlaceholder.classList.add('hidden')\n                }\n            }\n            eDarkModeEnabled() {\n                document.documentElement.classList.add('dark')\n                localStorage.setItem('theme', 'dark')\n                this.logo.classList.add('hidden')\n                this.logoDark.classList.remove('hidden')\n                this.moon.classList.add('md:flex')\n                this.sun.classList.remove('md:flex')\n                this.main.classList.remove('scrollbar')\n                this.main.classList.add('scrollbar-dark')\n            }\n            eLightModeEnabled() {\n                document.documentElement.classList.remove('dark')\n                localStorage.setItem('theme', 'light')\n                this.logo.classList.remove('hidden')\n                this.logoDark.classList.add('hidden')\n                this.moon.classList.remove('md:flex')\n                this.sun.classList.add('md:flex')\n                this.main.classList.remove('scrollbar-dark')\n                this.main.classList.add('scrollbar')\n            }\n            eToggleMobileNav() {\n                let mobilenav = document.getElementById('mobilenav')\n                if (mobilenav.classList.contains('hidden')) {\n                    mobilenav.classList.remove('hidden')\n                    this.bars.classList.add('hidden')\n                    this.x.classList.remove('hidden')\n                    this.overlay.classList.remove('hidden')\n                } else {\n                    mobilenav.classList.add('hidden')\n                    this.bars.classList.remove('hidden')\n                    this.x.classList.add('hidden')\n                    this.overlay.classList.add('hidden')\n                }\n            }\n        }\n        const header = new Header()\n    </script>
<script>\n        class PageNav {\n            constructor() {}\n            hook() {\n                this.main = document.querySelector('#main')\n                this.pagenav = document.querySelector('#pagenav')\n                this.pagenavItems = this.pagenav.querySelectorAll('.pagenav-item')\n                this.sections = this.main.querySelectorAll('.section')\n                this.debounceTimer;\n                this.main.addEventListener('scroll', this.eMainScrollEvent.bind(this));\n                this.updateActiveSection();\n                if (this.pagenavItems.length > 0) {\n                    this.pagenavItems[0].classList.add('text-blue');\n                }\n                for (let i = 0; i < this.pagenavItems.length; i++) {\n                    let pagenavItem = this.pagenavItems[i];\n                    pagenavItem.removeEventListener('click', this.eScrollToSection.bind(this));\n                    pagenavItem.addEventListener('click', this.eScrollToSection.bind(this));\n                }\n            }\n            updateActiveSection() {\n                let mainCenter = this.main.scrollTop + this.main.offsetHeight / 2;\n                let closestSection = null;\n                let closestDistance = Infinity;\n                for (let i = 0; i < this.sections.length; i++) {\n                    let section = this.sections[i];\n                    let sectionMiddle = section.offsetTop + section.offsetHeight / 2;\n                    let distance = Math.abs(mainCenter - sectionMiddle);\n                    if (distance < closestDistance) {\n                        closestDistance = distance;\n                        closestSection = section;\n                    }\n                }\n                if (closestSection) {\n                    let activeSectionID = closestSection.id;\n                    this.pagenavItems.forEach(function(pagenavItem) {\n                        let sectionref = pagenavItem.getAttribute('sectionref');\n                        if (sectionref === activeSectionID) {\n                            pagenavItem.classList.add('text-blue');\n                        } else {\n                            pagenavItem.classList.remove('text-blue');\n                        }\n                    });\n                }\n            }\n            eScrollToSection(e) {\n                let link = e.currentTarget;\n                let sectionref = link.getAttribute('sectionref');\n                let section = document.getElementById(sectionref);\n                section.scrollIntoView({ behavior: 'auto' });\n            }\n            eMainScrollEvent() {\n                clearTimeout(this.debounceTimer);\n                this.debounceTimer = setTimeout(this.updateActiveSection.bind(this), 100);\n            }\n        }\n        const pagenav = new PageNav()\n    </script>
