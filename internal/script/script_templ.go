// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.598
package script

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"

func ScrollTo(id string) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_ScrollTo_cb26`,
		Function: `function __templ_ScrollTo_cb26(id){document.getElementById(id).scrollIntoView({ behavior: 'auto' });
}`,
		Call:       templ.SafeScript(`__templ_ScrollTo_cb26`, id),
		CallInline: templ.SafeScriptInline(`__templ_ScrollTo_cb26`, id),
	}
}

func HighlightPageNavigation() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_HighlightPageNavigation_a6e0`,
		Function: `function __templ_HighlightPageNavigation_a6e0(){let main = qs('#main'); // Assuming qs is a shorthand for querySelector
    let pagenavItems = qsa(".pagenav-item");
    let sections = qsa('.section');
    let debounceTimer;

    function updateActiveSection() {
        // Calculate the center of the main area visible part
        let mainCenter = main.scrollTop + main.offsetHeight / 2;
        let closestSection = null;
        let closestDistance = Infinity;

        for (let i = 0; i < sections.length; i++) {
            let section = sections[i];
            // Calculate the middle point of the section
            let sectionMiddle = section.offsetTop + section.offsetHeight / 2;
            // Calculate the distance of the section middle to the main center
            let distance = Math.abs(mainCenter - sectionMiddle);

            // Check if this section is closer to the center of the main area than the previous ones
            if (distance < closestDistance) {
                closestDistance = distance;
                closestSection = section;
            }
        }

        if (closestSection) {
            let activeSectionID = closestSection.id;
            pagenavItems.forEach(function(pagenavItem) {
                let sectionref = pagenavItem.getAttribute('sectionref');
                if (sectionref === activeSectionID) {
                    pagenavItem.classList.add('text-blue-500');
                    pagenavItem.classList.remove('text-black');
                } else {
                    pagenavItem.classList.add('text-black');
                    pagenavItem.classList.remove('text-blue-500');
                }
            });
        }
    }

    // Attach the scroll event listener
    main.addEventListener('scroll', function() {
        clearTimeout(debounceTimer); // Clear the previous timeout if the event is fired again within the wait period
        debounceTimer = setTimeout(updateActiveSection, 100); // Set a new timeout
    });

    // Set the first .pagenav-item as active on initial load
    function setInitialActiveNavItem() {
        if (pagenavItems.length > 0) {
            pagenavItems[0].classList.add('text-blue-500');
        }
    }

    // Call the function to update active section on initial load, and to set the first navigation item as active
    updateActiveSection(); // This will handle the logic of setting the closest section as active even on load
    setInitialActiveNavItem();
}`,
		Call:       templ.SafeScript(`__templ_HighlightPageNavigation_a6e0`),
		CallInline: templ.SafeScriptInline(`__templ_HighlightPageNavigation_a6e0`),
	}
}

func SiteNavDropdownToggle() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_SiteNavDropdownToggle_6451`,
		Function: `function __templ_SiteNavDropdownToggle_6451(){let dropdowns = qsa('.sitenav-dropdown')
}`,
		Call:       templ.SafeScript(`__templ_SiteNavDropdownToggle_6451`),
		CallInline: templ.SafeScriptInline(`__templ_SiteNavDropdownToggle_6451`),
	}
}

func ColorSiteNavItemsNoDropdowns() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_ColorSiteNavItemsNoDropdowns_e98c`,
		Function: `function __templ_ColorSiteNavItemsNoDropdowns_e98c(){let baseSiteNavItems = qsa('.sitenav-item-no-dropdown')
    let currentPath = window.location.pathname;
    for (let i = 0; i < baseSiteNavItems.length; i++) {
        let navitem = baseSiteNavItems[i];
        let activeBackgroundPath =navitem.getAttribute('active-background-path');
        let activeColorPath = navitem.getAttribute('active-color-path');
        if (activeBackgroundPath == currentPath) {
            navitem.classList.add('bg-gray-200');
        }
        if (activeColorPath == currentPath) {
            navitem.classList.remove('text-gray-700');
            navitem.classList.add('text-blue-500');
        }
    }
}`,
		Call:       templ.SafeScript(`__templ_ColorSiteNavItemsNoDropdowns_e98c`),
		CallInline: templ.SafeScriptInline(`__templ_ColorSiteNavItemsNoDropdowns_e98c`),
	}
}

func ColorSiteNavItemsWithDropdowns() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_ColorSiteNavItemsWithDropdowns_c84e`,
		Function: `function __templ_ColorSiteNavItemsWithDropdowns_c84e(){let dropdowns = qsa('.sitenav-dropdown');
    let path = window.location.pathname;
    for (let i = 0; i < dropdowns.length; i++) {
        let dropdown = dropdowns[i];
        let title = dropdown.querySelector('.dropdown-title')
        console.log(dropdown)
        console.log(title)
    }
}`,
		Call:       templ.SafeScript(`__templ_ColorSiteNavItemsWithDropdowns_c84e`),
		CallInline: templ.SafeScriptInline(`__templ_ColorSiteNavItemsWithDropdowns_c84e`),
	}
}
